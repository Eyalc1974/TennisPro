import React, { useState, useEffect } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, onAuthStateChanged } from 'firebase/auth';
import { getFirestore, collection, doc, addDoc, setDoc, onSnapshot, query, writeBatch } from 'firebase/firestore';
import { DndProvider } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';

// --- Firebase Configuration ---
const firebaseConfig = typeof __firebase_config !== 'undefined' 
    ? JSON.parse(__firebase_config)
    : {
        apiKey: "YOUR_API_KEY",
        authDomain: "YOUR_AUTH_DOMAIN",
        projectId: "YOUR_PROJECT_ID",
        storageBucket: "YOUR_STORAGE_BUCKET",
        messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
        appId: "YOUR_APP_ID"
      };

// --- Firebase Initialization ---
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);

// --- App ID ---
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-tennis-app';

// --- Helper Functions ---
const collections = {
    players: `/artifacts/${appId}/public/data/players`,
    matches: `/artifacts/${appId}/public/data/matches`,
    tournament: `/artifacts/${appId}/public/data/tournament`
};

const tournamentDocRef = doc(db, collections.tournament, 'main');

// --- Main App Component ---
function App() {
    const [userId, setUserId] = useState(null);
    const [players, setPlayers] = useState([]);
    const [matches, setMatches] = useState([]);
    const [tournamentInfo, setTournamentInfo] = useState({
        state: 'setup', // 'setup', 'active', 'completed'
        type: 'knockout', // 'knockout', 'league'
        winner: null,
    });
    const [isAuthReady, setIsAuthReady] = useState(false);

    // --- Authentication ---
    useEffect(() => {
        const unsubscribe = onAuthStateChanged(auth, async (user) => {
            if (user) {
                setUserId(user.uid);
            } else {
                try {
                    const userCredential = await signInAnonymously(auth);
                    setUserId(userCredential.user.uid);
                } catch (error) {
                    console.error("Anonymous sign-in failed:", error);
                }
            }
            setIsAuthReady(true);
        });
        return () => unsubscribe();
    }, []);

    // --- Data Fetching ---
    useEffect(() => {
        if (!isAuthReady) return;

        const unsubscribers = [
            onSnapshot(query(collection(db, collections.players)), snapshot => {
                const playersData = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                setPlayers(playersData);
            }),
            onSnapshot(query(collection(db, collections.matches)), snapshot => {
                const matchesData = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                matchesData.sort((a, b) => a.round - b.round || a.matchNumber - b.matchNumber);
                setMatches(matchesData);
            }),
            onSnapshot(tournamentDocRef, doc => {
                if (doc.exists()) {
                    setTournamentInfo(doc.data());
                } else {
                    setTournamentInfo({ state: 'setup', type: 'knockout', winner: null });
                }
            })
        ];

        return () => unsubscribers.forEach(unsub => unsub());
    }, [isAuthReady]);

    // --- Tournament Logic ---
    const addPlayer = async (name) => {
        if (name.trim() === '' || players.find(p => p.name.toLowerCase() === name.toLowerCase())) {
            alert("Player name cannot be empty or duplicate.");
            return;
        }
        await addDoc(collection(db, collections.players), { name, wins: 0, losses: 0, points: 0 });
    };

    const removePlayer = async (playerId) => {
         const batch = writeBatch(db);
         batch.delete(doc(db, collections.players, playerId));
         await batch.commit();
    };
    
    const setTournamentType = (type) => {
        setTournamentInfo(prev => ({ ...prev, type }));
    };

    const startTournament = async () => {
        if (players.length < 2) {
            alert("You need at least 2 players to start a tournament.");
            return;
        }

        const batch = writeBatch(db);
        let newMatches = [];

        if (tournamentInfo.type === 'knockout') {
            newMatches = generateKnockoutMatches();
            await advanceWinners(1, newMatches, players); // Pass initial matches to handle byes
        } else { // League
            newMatches = generateLeagueMatches();
        }

        newMatches.forEach(match => {
            const matchRef = doc(collection(db, collections.matches));
            batch.set(matchRef, match);
        });

        batch.set(tournamentDocRef, { ...tournamentInfo, state: 'active', winner: null });
        await batch.commit();
    };
    
    const generateKnockoutMatches = () => {
        let shuffledPlayers = [...players].sort(() => 0.5 - Math.random());
        const numPlayers = shuffledPlayers.length;
        const totalRounds = Math.ceil(Math.log2(numPlayers));
        const bracketSize = Math.pow(2, totalRounds);
        const byes = bracketSize - numPlayers;
        let playerIndex = 0;
        const firstRoundMatches = [];

        for (let i = 0; i < bracketSize / 2; i++) {
            const match = { round: 1, matchNumber: i + 1, player1Id: null, player2Id: null, winnerId: null, score: '', status: 'scheduled' };
            if (i < byes) {
                match.player1Id = shuffledPlayers[playerIndex].id;
                match.winnerId = shuffledPlayers[playerIndex].id; // Auto-win for bye
                match.status = 'completed';
                match.score = 'BYE';
                playerIndex++;
            } else {
                 match.player1Id = shuffledPlayers[playerIndex]?.id || null;
                 playerIndex++;
                 match.player2Id = shuffledPlayers[playerIndex]?.id || null;
                 playerIndex++;
            }
            firstRoundMatches.push(match);
        }
        return firstRoundMatches;
    };
    
    const generateLeagueMatches = () => {
        const leagueMatches = [];
        let schedulePlayers = [...players];
        if (schedulePlayers.length % 2 !== 0) {
            schedulePlayers.push({ id: 'BYE', name: 'BYE' });
        }
        const numRounds = schedulePlayers.length - 1;
        const half = schedulePlayers.length / 2;

        for (let round = 0; round < numRounds; round++) {
            for (let i = 0; i < half; i++) {
                const player1 = schedulePlayers[i];
                const player2 = schedulePlayers[schedulePlayers.length - 1 - i];
                if (player1.id !== 'BYE' && player2.id !== 'BYE') {
                    leagueMatches.push({
                        round: round + 1,
                        matchNumber: leagueMatches.length % (players.length/2) + 1,
                        player1Id: player1.id,
                        player2Id: player2.id,
                        winnerId: null,
                        score: '',
                        status: 'scheduled',
                    });
                }
            }
            // Rotate players for next round
            const lastPlayer = schedulePlayers.pop();
            schedulePlayers.splice(1, 0, lastPlayer);
        }
        return leagueMatches;
    };

    const advanceWinners = async (completedRound, currentMatches, currentPlayers) => {
        const winners = currentMatches
            .filter(m => m.round === completedRound && m.winnerId)
            .sort((a, b) => a.matchNumber - b.matchNumber)
            .map(m => m.winnerId);

        if (winners.length <= 1 && completedRound > 0) {
            const finalWinner = currentPlayers.find(p => p.id === winners[0]);
            await setDoc(tournamentDocRef, { ...tournamentInfo, state: 'completed', winner: finalWinner ? finalWinner.name : 'Unknown' });
            return;
        }

        const nextRoundMatches = [];
        for (let i = 0; i < winners.length; i += 2) {
            const newMatch = { round: completedRound + 1, matchNumber: nextRoundMatches.length + 1, winnerId: null, score: '', status: 'scheduled' };
            if (winners[i] && winners[i+1]) {
                 newMatch.player1Id = winners[i];
                 newMatch.player2Id = winners[i+1];
            } else if (winners[i]) {
                 newMatch.player1Id = winners[i];
                 newMatch.player2Id = null; // Bye
                 newMatch.winnerId = winners[i];
                 newMatch.score = 'BYE';
                 newMatch.status = 'completed';
            }
            nextRoundMatches.push(newMatch);
        }

        if (nextRoundMatches.length > 0) {
            const batch = writeBatch(db);
            nextRoundMatches.forEach(match => {
                const matchRef = doc(collection(db, collections.matches));
                batch.set(matchRef, match);
            });
            await batch.commit();
            if (nextRoundMatches.some(m => m.status === 'completed')) {
                await advanceWinners(completedRound + 1, [...currentMatches, ...nextRoundMatches], currentPlayers);
            }
        }
    };
    
    const determineLeagueWinner = () => {
        const sortedPlayers = [...players].sort((a,b) => (b.wins || 0) - (a.wins || 0));
        const winnerName = sortedPlayers.length > 0 ? sortedPlayers[0].name : "Unknown";
        setDoc(tournamentDocRef, { ...tournamentInfo, state: 'completed', winner: winnerName });
    };

    const updateMatchScore = async (matchId, winnerId, score) => {
        const matchRef = doc(db, collections.matches, matchId);
        const match = matches.find(m => m.id === matchId);

        const batch = writeBatch(db);
        batch.update(matchRef, { winnerId, score, status: 'completed' });
        
        const winnerData = players.find(p => p.id === winnerId);
        if (winnerData) batch.update(doc(db, collections.players, winnerId), { wins: (winnerData.wins || 0) + 1 });
        
        const loserId = match.player1Id === winnerId ? match.player2Id : match.player1Id;
        if (loserId) {
            const loserData = players.find(p => p.id === loserId);
            if(loserData) batch.update(doc(db, collections.players, loserId), { losses: (loserData.losses || 0) + 1 });
        }
        await batch.commit();
        
        const updatedMatches = matches.map(m => m.id === matchId ? {...m, winnerId, score, status: 'completed' } : m);
        
        if (tournamentInfo.type === 'league') {
            const allLeagueMatchesPlayed = updatedMatches.every(m => m.status === 'completed' || m.player1Id === 'BYE' || m.player2Id === 'BYE');
            if (allLeagueMatchesPlayed) {
                determineLeagueWinner();
            }
        } else { // knockout
            const currentRound = match.round;
            const roundMatches = updatedMatches.filter(m => m.round === currentRound);
            const isRoundComplete = roundMatches.every(m => m.status === 'completed');
            if (isRoundComplete) {
                await advanceWinners(currentRound, updatedMatches, players);
            }
        }
    };
    
    const resetTournament = async () => {
        const batch = writeBatch(db);
        matches.forEach(m => batch.delete(doc(db, collections.matches, m.id)));
        players.forEach(p => batch.update(doc(db, collections.players, p.id), { wins: 0, losses: 0, points: 0 }));
        batch.set(tournamentDocRef, { ...tournamentInfo, state: 'setup', winner: null });
        await batch.commit();
    };

    const rounds = matches.reduce((acc, match) => {
        (acc[match.round] = acc[match.round] || []).push(match);
        return acc;
    }, {});
    
    // --- UI Rendering ---
    return (
        <DndProvider backend={HTML5Backend}>
            <div className="bg-gray-900 text-white min-h-screen font-sans p-4 sm:p-6 lg:p-8">
                <div className="max-w-7xl mx-auto">
                    <Header tournamentState={tournamentInfo.state} winner={tournamentInfo.winner} />
                    
                    {tournamentInfo.state === 'completed' && <WinnerDisplay winner={tournamentInfo.winner} onReset={resetTournament} />}

                    <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 mt-6">
                        <div className="lg:col-span-2">
                             {tournamentInfo.state === 'setup' && 
                                <PlayerSetup 
                                    players={players} 
                                    addPlayer={addPlayer} 
                                    removePlayer={removePlayer} 
                                    startTournament={startTournament}
                                    tournamentType={tournamentInfo.type}
                                    setTournamentType={setTournamentType}
                                />
                             }
                             {tournamentInfo.state !== 'setup' && tournamentInfo.type === 'knockout' && <Bracket rounds={rounds} players={players} onUpdateScore={updateMatchScore} />}
                             {tournamentInfo.state !== 'setup' && tournamentInfo.type === 'league' && <LeagueSchedule rounds={rounds} players={players} onUpdateScore={updateMatchScore} />}
                        </div>

                        <div className="space-y-8">
                           <Leaderboard players={players} />
                           {tournamentInfo.state === 'active' && <UpcomingMatches matches={matches} players={players} />}
                           {tournamentInfo.state !== 'setup' && (
                                <div>
                                    <button
                                        onClick={() => {if(window.confirm('Are you sure you want to reset the entire tournament? This cannot be undone.')) resetTournament()}}
                                        className="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-4 rounded-lg transition-colors duration-300 shadow-lg">
                                        Reset Tournament
                                    </button>
                                </div>
                            )}
                        </div>
                    </div>
                     <Footer userId={userId} />
                </div>
            </div>
        </DndProvider>
    );
}

// --- Sub-Components ---
const Header = ({ tournamentState, winner }) => (
    <header className="text-center mb-8">
        <h1 className="text-4xl sm:text-5xl font-bold text-teal-400 tracking-tight">
            Tennis Tournament Manager
        </h1>
        <p className="text-gray-400 mt-2 text-lg">
            {tournamentState === 'setup' && "Player registration is open. Add players below."}
            {tournamentState === 'active' && "The tournament is live! Good luck to all players."}
            {tournamentState === 'completed' && `The tournament has concluded. Congratulations, ${winner}!`}
        </p>
    </header>
);

const WinnerDisplay = ({ winner, onReset }) => (
    <div className="bg-gray-800 border border-teal-500 rounded-xl p-8 my-8 text-center flex flex-col items-center shadow-2xl">
        <svg className="w-24 h-24 text-yellow-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.539 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.196-1.539-1.118l1.518-4.674a1 1 0 00-.363-1.118L2.05 10.1c-.783-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"></path></svg>
        <h2 className="text-3xl font-bold text-white">Tournament Winner!</h2>
        <p className="text-5xl font-extrabold text-yellow-400 my-4">{winner}</p>
        <button onClick={onReset} className="mt-4 bg-teal-500 hover:bg-teal-600 text-white font-bold py-2 px-6 rounded-lg transition-colors">
            Start New Tournament
        </button>
    </div>
);

const PlayerSetup = ({ players, addPlayer, removePlayer, startTournament, tournamentType, setTournamentType }) => {
    const [playerName, setPlayerName] = useState('');
    const handleSubmit = (e) => { e.preventDefault(); addPlayer(playerName); setPlayerName(''); };

    return (
        <div className="bg-gray-800 rounded-xl p-6 shadow-lg">
            <h2 className="text-2xl font-bold text-teal-400 mb-4">1. Select Format</h2>
            <div className="grid grid-cols-2 gap-4 mb-6">
                <button onClick={() => setTournamentType('knockout')} className={`p-4 rounded-lg text-center font-bold transition-all ${tournamentType === 'knockout' ? 'bg-teal-500 text-white ring-2 ring-offset-2 ring-offset-gray-800 ring-teal-400' : 'bg-gray-700 hover:bg-gray-600'}`}>
                    Knockout
                    <span className="block text-xs font-normal text-gray-300">Single Elimination Bracket</span>
                </button>
                <button onClick={() => setTournamentType('league')} className={`p-4 rounded-lg text-center font-bold transition-all ${tournamentType === 'league' ? 'bg-teal-500 text-white ring-2 ring-offset-2 ring-offset-gray-800 ring-teal-400' : 'bg-gray-700 hover:bg-gray-600'}`}>
                    League
                    <span className="block text-xs font-normal text-gray-300">Round-Robin Format</span>
                </button>
            </div>

            <h2 className="text-2xl font-bold text-teal-400 mb-4">2. Add Players</h2>
            <form onSubmit={handleSubmit} className="flex gap-2 mb-4">
                <input type="text" value={playerName} onChange={(e) => setPlayerName(e.target.value)} placeholder="Enter player name" className="flex-grow bg-gray-700 text-white rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-teal-500" />
                <button type="submit" className="bg-teal-500 hover:bg-teal-600 text-white font-bold py-3 px-5 rounded-lg transition-colors">+</button>
            </form>
            <div className="space-y-2 mb-6 max-h-48 overflow-y-auto pr-2">
                {players.map(p => (
                    <div key={p.id} className="flex justify-between items-center bg-gray-700 p-3 rounded-lg">
                        <span className="text-white">{p.name}</span>
                        <button onClick={() => removePlayer(p.id)} className="text-red-400 hover:text-red-600 font-bold">✕</button>
                    </div>
                ))}
            </div>
            <button onClick={startTournament} disabled={players.length < 2} className="w-full bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-4 rounded-lg transition-colors disabled:bg-gray-600 disabled:cursor-not-allowed">
                Start Tournament ({players.length} Players)
            </button>
        </div>
    );
};

const Bracket = ({ rounds, players, onUpdateScore }) => (
    <div className="bg-gray-800 rounded-xl p-4 sm:p-6 shadow-lg">
        <h2 className="text-2xl font-bold text-teal-400 mb-6 text-center">Knockout Bracket</h2>
        <div className="flex space-x-4 overflow-x-auto pb-4">
            {Object.keys(rounds).length === 0 && <p className="text-gray-400 w-full text-center">The bracket will appear here.</p>}
            {Object.entries(rounds).map(([roundNum, matches]) => (
                <div key={roundNum} className="flex-shrink-0 w-64 space-y-4">
                    <h3 className="text-xl font-semibold text-center text-gray-300">Round {roundNum}</h3>
                    {matches.map(match => <MatchCard key={match.id} match={match} players={players} onUpdateScore={onUpdateScore} />)}
                </div>
            ))}
        </div>
    </div>
);

const LeagueSchedule = ({ rounds, players, onUpdateScore }) => (
    <div className="bg-gray-800 rounded-xl p-4 sm:p-6 shadow-lg">
        <h2 className="text-2xl font-bold text-teal-400 mb-6 text-center">League Schedule</h2>
        <div className="space-y-6">
            {Object.keys(rounds).length === 0 && <p className="text-gray-400 w-full text-center">The schedule will appear here.</p>}
            {Object.entries(rounds).map(([roundNum, matches]) => (
                <div key={roundNum}>
                    <h3 className="text-xl font-semibold text-gray-300 mb-3">Round {roundNum}</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        {matches.map(match => <MatchCard key={match.id} match={match} players={players} onUpdateScore={onUpdateScore} />)}
                    </div>
                </div>
            ))}
        </div>
    </div>
);

const MatchCard = ({ match, players, onUpdateScore }) => {
    const [score, setScore] = useState('');
    const [isEditing, setIsEditing] = useState(false);
    const getPlayer = (id) => players.find(p => p.id === id);
    const player1 = getPlayer(match.player1Id) || { name: 'TBD', id: null };
    const player2 = getPlayer(match.player2Id) || { name: 'TBD', id: null };
    const canEdit = match.status === 'scheduled' && player1.id && player2.id;
    
    const handleScoreSubmit = () => {
        if (!score.trim()) return alert("Score cannot be empty.");
        const winnerInput = prompt(`Who won? Enter '1' for ${player1.name} or '2' for ${player2.name}.`);
        const winnerId = winnerInput === '1' ? player1.id : winnerInput === '2' ? player2.id : null;
        if (winnerId) {
            onUpdateScore(match.id, winnerId, score);
            setIsEditing(false);
        } else {
            alert("Invalid input. Please enter '1' or '2'.");
        }
    };

    return (
        <div className={`bg-gray-700 rounded-lg p-3 shadow-md border-l-4 ${match.status === 'completed' ? 'border-teal-500' : 'border-gray-500'}`}>
            <div className="flex justify-between items-center text-sm text-gray-400 mb-2">
                <span className="font-mono">R{match.round}.M{match.matchNumber}</span>
                <span className={`px-2 py-0.5 rounded-full text-xs font-semibold ${match.status === 'completed' ? 'bg-teal-500/20 text-teal-400' : 'bg-gray-500/20 text-gray-300'}`}>{match.status}</span>
            </div>
            <div className="space-y-1">
                <PlayerInMatch player={player1} isWinner={match.winnerId === player1.id} />
                <div className="text-center text-xs text-gray-500 my-1">vs</div>
                <PlayerInMatch player={player2} isWinner={match.winnerId === player2.id} />
            </div>
            {match.status === 'completed' && match.score && <div className="mt-2 text-center text-sm text-gray-300">Score: <span className="font-bold text-white">{match.score}</span></div>}
            {isEditing && (
                <div className="mt-3 flex gap-2">
                    <input type="text" value={score} onChange={(e) => setScore(e.target.value)} placeholder="e.g., 6-4, 6-3" className="w-full bg-gray-600 text-white rounded-md px-2 py-1 text-sm focus:outline-none focus:ring-1 focus:ring-teal-500"/>
                    <button onClick={handleScoreSubmit} className="bg-green-600 hover:bg-green-700 text-white text-xs font-bold py-1 px-2 rounded-md">Save</button>
                    <button onClick={() => setIsEditing(false)} className="bg-gray-500 hover:bg-gray-600 text-white text-xs font-bold py-1 px-2 rounded-md">X</button>
                </div>
            )}
            {canEdit && !isEditing && <button onClick={() => setIsEditing(true)} className="w-full mt-3 text-xs bg-teal-600 hover:bg-teal-700 text-white font-semibold py-1 px-2 rounded-md transition-colors">Enter Score</button>}
        </div>
    );
};

const PlayerInMatch = ({ player, isWinner }) => {
    if (!player.id) {
        if (player.name === 'BYE') return <div className="text-gray-500 p-2 text-center text-sm">-- BYE --</div>;
        return <div className="text-gray-400 p-2 text-sm">-- TBD --</div>;
    }
    return (
        <div className={`flex items-center justify-between p-2 rounded ${isWinner ? 'bg-green-500/20' : ''}`}>
            <span className={`font-semibold ${isWinner ? 'text-green-400' : 'text-white'}`}>{player.name}</span>
            {isWinner && <span className="text-green-400 text-xs">WIN</span>}
        </div>
    );
};

const Leaderboard = ({ players }) => {
    const sortedPlayers = [...players].sort((a, b) => (b.wins || 0) - (a.wins || 0) || (a.losses || 0) - (b.losses || 0));
    return (
        <div className="bg-gray-800 rounded-xl p-6 shadow-lg">
            <h2 className="text-2xl font-bold text-teal-400 mb-4">Leaderboard</h2>
            <div className="space-y-2">
                 <div className="grid grid-cols-4 gap-2 text-sm font-bold text-gray-400 px-3">
                    <span className="col-span-2">Player</span><span className="text-center">W</span><span className="text-center">L</span>
                </div>
                {sortedPlayers.map((player, index) => (
                    <div key={player.id} className={`grid grid-cols-4 gap-2 items-center p-3 rounded-lg ${index === 0 ? 'bg-yellow-500/10' : 'bg-gray-700/50'}`}>
                        <div className="col-span-2 flex items-center"><span className={`w-6 text-center font-bold ${index === 0 ? 'text-yellow-400' : 'text-gray-400'}`}>{index + 1}</span><span className="text-white ml-2">{player.name}</span></div>
                        <span className="text-center text-green-400 font-bold">{player.wins || 0}</span><span className="text-center text-red-400 font-bold">{player.losses || 0}</span>
                    </div>
                ))}
                 {players.length === 0 && <p className="text-gray-500 text-center py-4">No players yet.</p>}
            </div>
        </div>
    );
};

const UpcomingMatches = ({ matches, players }) => {
    const upcoming = matches.filter(m => m.status === 'scheduled' && m.player1Id && m.player2Id);
    const getPlayerName = (id) => players.find(p => p.id === id)?.name || 'TBD';
    return (
        <div className="bg-gray-800 rounded-xl p-6 shadow-lg">
            <h2 className="text-2xl font-bold text-teal-400 mb-4">Upcoming Matches</h2>
            <div className="space-y-3 max-h-60 overflow-y-auto pr-2">
                {upcoming.length > 0 ? (
                    upcoming.map(match => (
                        <div key={match.id} className="bg-gray-700 p-3 rounded-lg text-center">
                            <span className="font-semibold text-white">{getPlayerName(match.player1Id)}</span> <span className="mx-2 text-gray-400">vs</span> <span className="font-semibold text-white">{getPlayerName(match.player2Id)}</span>
                             <div className="text-xs text-gray-500 mt-1">Round {match.round} - Match {match.matchNumber}</div>
                        </div>
                    ))
                ) : (
                    <p className="text-gray-500 text-center py-4">No upcoming matches scheduled.</p>
                )}
            </div>
        </div>
    );
};

const Footer = ({ userId }) => (
    <footer className="text-center mt-10 text-gray-600 text-xs">
        <p>App ID: <span className="font-mono">{appId}</span></p>
        <p>Your User ID: <span className="font-mono">{userId || 'Initializing...'}</span></p>
    </footer>
);

export default App;

